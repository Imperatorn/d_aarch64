module android.java.java.util.Arrays_d_interface;
import arsd.jni : IJavaObjectImplementation, JavaPackageId, JavaName, IJavaObject, ImportExportImpl;

import import4 = android.java.java.util.function_.DoubleBinaryOperator_d_interface;
import import13 = android.java.java.util.Spliterator_OfInt_d_interface;
import import11 = android.java.java.util.function_.IntToDoubleFunction_d_interface;
import import15 = android.java.java.util.Spliterator_OfDouble_d_interface;
import import6 = android.java.java.lang.Class_d_interface;
import import2 = android.java.java.util.function_.BinaryOperator_d_interface;
import import9 = android.java.java.util.function_.IntUnaryOperator_d_interface;
import import10 = android.java.java.util.function_.IntToLongFunction_d_interface;
import import18 = android.java.java.util.stream.LongStream_d_interface;
import import19 = android.java.java.util.stream.DoubleStream_d_interface;
import import5 = android.java.java.util.function_.IntBinaryOperator_d_interface;
import import8 = android.java.java.util.function_.IntFunction_d_interface;
import import12 = android.java.java.util.Spliterator_d_interface;
import import0 = android.java.java.lang.Comparable_d_interface;
import import3 = android.java.java.util.function_.LongBinaryOperator_d_interface;
import import14 = android.java.java.util.Spliterator_OfLong_d_interface;
import import16 = android.java.java.util.stream.Stream_d_interface;
import import17 = android.java.java.util.stream.IntStream_d_interface;
import import7 = android.java.java.util.List_d_interface;
import import1 = android.java.java.util.Comparator_d_interface;

final class Arrays : IJavaObject {
	@Import static void sort(int[]);
	@Import static void sort(int, int, int[]);
	@Import static void sort(long[]);
	@Import static void sort(long, int, int[]);
	@Import static void sort(short[]);
	@Import static void sort(short, int, int[]);
	@Import static void sort(wchar[]);
	@Import static void sort(wchar, int, int[]);
	@Import static void sort(byte[]);
	@Import static void sort(byte, int, int[]);
	@Import static void sort(float[]);
	@Import static void sort(float, int, int[]);
	@Import static void sort(double[]);
	@Import static void sort(double, int, int[]);
	@Import static void parallelSort(byte[]);
	@Import static void parallelSort(byte, int, int[]);
	@Import static void parallelSort(wchar[]);
	@Import static void parallelSort(wchar, int, int[]);
	@Import static void parallelSort(short[]);
	@Import static void parallelSort(short, int, int[]);
	@Import static void parallelSort(int[]);
	@Import static void parallelSort(int, int, int[]);
	@Import static void parallelSort(long[]);
	@Import static void parallelSort(long, int, int[]);
	@Import static void parallelSort(float[]);
	@Import static void parallelSort(float, int, int[]);
	@Import static void parallelSort(double[]);
	@Import static void parallelSort(double, int, int[]);
	@Import static void parallelSort(import0.Comparable[]);
	@Import static void parallelSort(import0.Comparable, int, int[]);
	@Import static void parallelSort(IJavaObject, import1.Comparator[]);
	@Import static void parallelSort(IJavaObject, int, int, import1.Comparator[]);
	@Import static void sort(IJavaObject[]);
	@Import static void sort(IJavaObject, int, int[]);
	@Import static void sort(IJavaObject, import1.Comparator[]);
	@Import static void sort(IJavaObject, int, int, import1.Comparator[]);
	@Import static void parallelPrefix(IJavaObject, import2.BinaryOperator[]);
	@Import static void parallelPrefix(IJavaObject, int, int, import2.BinaryOperator[]);
	@Import static void parallelPrefix(long, import3.LongBinaryOperator[]);
	@Import static void parallelPrefix(long, int, int, import3.LongBinaryOperator[]);
	@Import static void parallelPrefix(double, import4.DoubleBinaryOperator[]);
	@Import static void parallelPrefix(double, int, int, import4.DoubleBinaryOperator[]);
	@Import static void parallelPrefix(int, import5.IntBinaryOperator[]);
	@Import static void parallelPrefix(int, int, int, import5.IntBinaryOperator[]);
	@Import static int binarySearch(long, long[]);
	@Import static int binarySearch(long, int, int, long[]);
	@Import static int binarySearch(int, int[]);
	@Import static int binarySearch(int, int, int, int[]);
	@Import static int binarySearch(short, short[]);
	@Import static int binarySearch(short, int, int, short[]);
	@Import static int binarySearch(wchar, wchar[]);
	@Import static int binarySearch(wchar, int, int, wchar[]);
	@Import static int binarySearch(byte, byte[]);
	@Import static int binarySearch(byte, int, int, byte[]);
	@Import static int binarySearch(double, double[]);
	@Import static int binarySearch(double, int, int, double[]);
	@Import static int binarySearch(float, float[]);
	@Import static int binarySearch(float, int, int, float[]);
	@Import static int binarySearch(IJavaObject, IJavaObject[]);
	@Import static int binarySearch(IJavaObject, int, int, IJavaObject[]);
	@Import static int binarySearch(IJavaObject, IJavaObject, import1.Comparator[]);
	@Import static int binarySearch(IJavaObject, int, int, IJavaObject, import1.Comparator[]);
	@Import static bool equals(long, long[][]);
	@Import static bool equals(int, int[][]);
	@Import static bool equals(short, short[][]);
	@Import static bool equals(wchar, wchar[][]);
	@Import static bool equals(byte, byte[][]);
	@Import static bool equals(bool, bool[][]);
	@Import static bool equals(double, double[][]);
	@Import static bool equals(float, float[][]);
	@Import static bool equals(IJavaObject, IJavaObject[][]);
	@Import static void fill(long, long[]);
	@Import static void fill(long, int, int, long[]);
	@Import static void fill(int, int[]);
	@Import static void fill(int, int, int, int[]);
	@Import static void fill(short, short[]);
	@Import static void fill(short, int, int, short[]);
	@Import static void fill(wchar, wchar[]);
	@Import static void fill(wchar, int, int, wchar[]);
	@Import static void fill(byte, byte[]);
	@Import static void fill(byte, int, int, byte[]);
	@Import static void fill(bool, bool[]);
	@Import static void fill(bool, int, int, bool[]);
	@Import static void fill(double, double[]);
	@Import static void fill(double, int, int, double[]);
	@Import static void fill(float, float[]);
	@Import static void fill(float, int, int, float[]);
	@Import static void fill(IJavaObject, IJavaObject[]);
	@Import static void fill(IJavaObject, int, int, IJavaObject[]);
	@Import static IJavaObject[] copyOf(IJavaObject, int[]);
	@Import static IJavaObject[] copyOf(IJavaObject, int, import6.Class[]);
	@Import static byte[] copyOf(byte, int[]);
	@Import static short[] copyOf(short, int[]);
	@Import static int[] copyOf(int, int[]);
	@Import static long[] copyOf(long, int[]);
	@Import static wchar[] copyOf(wchar, int[]);
	@Import static float[] copyOf(float, int[]);
	@Import static double[] copyOf(double, int[]);
	@Import static bool[] copyOf(bool, int[]);
	@Import static IJavaObject[] copyOfRange(IJavaObject, int, int[]);
	@Import static IJavaObject[] copyOfRange(IJavaObject, int, int, import6.Class[]);
	@Import static byte[] copyOfRange(byte, int, int[]);
	@Import static short[] copyOfRange(short, int, int[]);
	@Import static int[] copyOfRange(int, int, int[]);
	@Import static long[] copyOfRange(long, int, int[]);
	@Import static wchar[] copyOfRange(wchar, int, int[]);
	@Import static float[] copyOfRange(float, int, int[]);
	@Import static double[] copyOfRange(double, int, int[]);
	@Import static bool[] copyOfRange(bool, int, int[]);
	@Import static import7.List asList(IJavaObject[]);
	@Import static int hashCode(long[]);
	@Import static int hashCode(int[]);
	@Import static int hashCode(short[]);
	@Import static int hashCode(wchar[]);
	@Import static int hashCode(byte[]);
	@Import static int hashCode(bool[]);
	@Import static int hashCode(float[]);
	@Import static int hashCode(double[]);
	@Import static int hashCode(IJavaObject[]);
	@Import static int deepHashCode(IJavaObject[]);
	@Import static bool deepEquals(IJavaObject, IJavaObject[][]);
	@Import static @JavaName("toString") string toString_(long[]);
	@Import static @JavaName("toString") string toString_(int[]);
	@Import static @JavaName("toString") string toString_(short[]);
	@Import static @JavaName("toString") string toString_(wchar[]);
	@Import static @JavaName("toString") string toString_(byte[]);
	@Import static @JavaName("toString") string toString_(bool[]);
	@Import static @JavaName("toString") string toString_(float[]);
	@Import static @JavaName("toString") string toString_(double[]);
	@Import static @JavaName("toString") string toString_(IJavaObject[]);
	@Import static string deepToString(IJavaObject[]);
	@Import static void setAll(IJavaObject, import8.IntFunction[]);
	@Import static void parallelSetAll(IJavaObject, import8.IntFunction[]);
	@Import static void setAll(int, import9.IntUnaryOperator[]);
	@Import static void parallelSetAll(int, import9.IntUnaryOperator[]);
	@Import static void setAll(long, import10.IntToLongFunction[]);
	@Import static void parallelSetAll(long, import10.IntToLongFunction[]);
	@Import static void setAll(double, import11.IntToDoubleFunction[]);
	@Import static void parallelSetAll(double, import11.IntToDoubleFunction[]);
	@Import static import12.Spliterator spliterator(IJavaObject[]);
	@Import static import12.Spliterator spliterator(IJavaObject, int, int[]);
	@Import static import13.Spliterator_OfInt spliterator(int[]);
	@Import static import13.Spliterator_OfInt spliterator(int, int, int[]);
	@Import static import14.Spliterator_OfLong spliterator(long[]);
	@Import static import14.Spliterator_OfLong spliterator(long, int, int[]);
	@Import static import15.Spliterator_OfDouble spliterator(double[]);
	@Import static import15.Spliterator_OfDouble spliterator(double, int, int[]);
	@Import static import16.Stream stream(IJavaObject[]);
	@Import static import16.Stream stream(IJavaObject, int, int[]);
	@Import static import17.IntStream stream(int[]);
	@Import static import17.IntStream stream(int, int, int[]);
	@Import static import18.LongStream stream(long[]);
	@Import static import18.LongStream stream(long, int, int[]);
	@Import static import19.DoubleStream stream(double[]);
	@Import static import19.DoubleStream stream(double, int, int[]);
	mixin IJavaObjectImplementation!(false);
	mixin JavaPackageId!("java.util", "Arrays");
}
