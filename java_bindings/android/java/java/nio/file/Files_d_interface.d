module android.java.java.nio.file.Files_d_interface;
import arsd.jni : IJavaObjectImplementation, JavaPackageId, JavaName, IJavaObject, ImportExportImpl, JavaInterfaceMembers;
static import arsd.jni;

import import2 = android.java.java.nio.file.OpenOption_d_interface;
import import19 = android.java.java.io.BufferedReader_d_interface;
import import18 = android.java.java.nio.file.FileVisitor_d_interface;
import import12 = android.java.java.lang.Class_d_interface;
import import24 = android.java.java.util.stream.Stream_d_interface;
import import4 = android.java.java.nio.channels.SeekableByteChannel_d_interface;
import import26 = android.java.java.util.function_.BiPredicate_d_interface;
import import23 = android.java.java.lang.Iterable_d_interface;
import import3 = android.java.java.io.OutputStream_d_interface;
import import1 = android.java.java.nio.file.Path_d_interface;
import import17 = android.java.java.nio.file.attribute.FileTime_d_interface;
import import8 = android.java.java.nio.file.DirectoryStream_Filter_d_interface;
import import14 = android.java.java.nio.file.attribute.BasicFileAttributes_d_interface;
import import15 = android.java.java.util.Map_d_interface;
import import20 = android.java.java.nio.charset.Charset_d_interface;
import import13 = android.java.java.nio.file.LinkOption_d_interface;
import import21 = android.java.java.io.BufferedWriter_d_interface;
import import16 = android.java.java.nio.file.attribute.UserPrincipal_d_interface;
import import0 = android.java.java.io.InputStream_d_interface;
import import11 = android.java.java.nio.file.attribute.FileAttributeView_d_interface;
import import9 = android.java.java.nio.file.CopyOption_d_interface;
import import10 = android.java.java.nio.file.FileStore_d_interface;
import import25 = android.java.java.nio.file.FileVisitOption_d_interface;
import import5 = android.java.java.util.Set_d_interface;
import import7 = android.java.java.nio.file.DirectoryStream_d_interface;
import import22 = android.java.java.util.List_d_interface;
import import6 = android.java.java.nio.file.attribute.FileAttribute_d_interface;

final class Files : IJavaObject {
	static immutable string[] _d_canCastTo = [
	];
	@Import static import0.InputStream newInputStream(import1.Path, import2.OpenOption[]);
	@Import static import3.OutputStream newOutputStream(import1.Path, import2.OpenOption[]);
	@Import static import4.SeekableByteChannel newByteChannel(import1.Path, import5.Set, import6.FileAttribute[]);
	@Import static import4.SeekableByteChannel newByteChannel(import1.Path, import2.OpenOption[]);
	@Import static import7.DirectoryStream newDirectoryStream(import1.Path);
	@Import static import7.DirectoryStream newDirectoryStream(import1.Path, string);
	@Import static import7.DirectoryStream newDirectoryStream(import1.Path, import8.DirectoryStream_Filter);
	@Import static import1.Path createFile(import1.Path, import6.FileAttribute[]);
	@Import static import1.Path createDirectory(import1.Path, import6.FileAttribute[]);
	@Import static import1.Path createDirectories(import1.Path, import6.FileAttribute[]);
	@Import static import1.Path createTempFile(import1.Path, string, string, import6.FileAttribute[]);
	@Import static import1.Path createTempFile(string, string, import6.FileAttribute[]);
	@Import static import1.Path createTempDirectory(import1.Path, string, import6.FileAttribute[]);
	@Import static import1.Path createTempDirectory(string, import6.FileAttribute[]);
	@Import static import1.Path createSymbolicLink(import1.Path, import1.Path, import6.FileAttribute[]);
	@Import static import1.Path createLink(import1.Path, import1.Path);
	@Import static @JavaName("delete") void delete_(import1.Path);
	@Import static bool deleteIfExists(import1.Path);
	@Import static import1.Path copy(import1.Path, import1.Path, import9.CopyOption[]);
	@Import static import1.Path move(import1.Path, import1.Path, import9.CopyOption[]);
	@Import static import1.Path readSymbolicLink(import1.Path);
	@Import static import10.FileStore getFileStore(import1.Path);
	@Import static bool isSameFile(import1.Path, import1.Path);
	@Import static bool isHidden(import1.Path);
	@Import static string probeContentType(import1.Path);
	@Import static import11.FileAttributeView getFileAttributeView(import1.Path, import12.Class, import13.LinkOption[]);
	@Import static import14.BasicFileAttributes readAttributes(import1.Path, import12.Class, import13.LinkOption[]);
	@Import static import1.Path setAttribute(import1.Path, string, IJavaObject, import13.LinkOption[]);
	@Import static IJavaObject getAttribute(import1.Path, string, import13.LinkOption[]);
	@Import static import15.Map readAttributes(import1.Path, string, import13.LinkOption[]);
	@Import static import5.Set getPosixFilePermissions(import1.Path, import13.LinkOption[]);
	@Import static import1.Path setPosixFilePermissions(import1.Path, import5.Set);
	@Import static import16.UserPrincipal getOwner(import1.Path, import13.LinkOption[]);
	@Import static import1.Path setOwner(import1.Path, import16.UserPrincipal);
	@Import static bool isSymbolicLink(import1.Path);
	@Import static bool isDirectory(import1.Path, import13.LinkOption[]);
	@Import static bool isRegularFile(import1.Path, import13.LinkOption[]);
	@Import static import17.FileTime getLastModifiedTime(import1.Path, import13.LinkOption[]);
	@Import static import1.Path setLastModifiedTime(import1.Path, import17.FileTime);
	@Import static long size(import1.Path);
	@Import static bool exists(import1.Path, import13.LinkOption[]);
	@Import static bool notExists(import1.Path, import13.LinkOption[]);
	@Import static bool isReadable(import1.Path);
	@Import static bool isWritable(import1.Path);
	@Import static bool isExecutable(import1.Path);
	@Import static import1.Path walkFileTree(import1.Path, import5.Set, int, import18.FileVisitor);
	@Import static import1.Path walkFileTree(import1.Path, import18.FileVisitor);
	@Import static import19.BufferedReader newBufferedReader(import1.Path, import20.Charset);
	@Import static import19.BufferedReader newBufferedReader(import1.Path);
	@Import static import21.BufferedWriter newBufferedWriter(import1.Path, import20.Charset, import2.OpenOption[]);
	@Import static import21.BufferedWriter newBufferedWriter(import1.Path, import2.OpenOption[]);
	@Import static long copy(import0.InputStream, import1.Path, import9.CopyOption[]);
	@Import static long copy(import1.Path, import3.OutputStream);
	@Import static byte[] readAllBytes(import1.Path);
	@Import static import22.List readAllLines(import1.Path, import20.Charset);
	@Import static import22.List readAllLines(import1.Path);
	@Import static import1.Path write(import1.Path, byte, import2.OpenOption[][]);
	@Import static import1.Path write(import1.Path, import23.Iterable, import20.Charset, import2.OpenOption[]);
	@Import static import1.Path write(import1.Path, import23.Iterable, import2.OpenOption[]);
	@Import static import24.Stream list(import1.Path);
	@Import static import24.Stream walk(import1.Path, int, import25.FileVisitOption[]);
	@Import static import24.Stream walk(import1.Path, import25.FileVisitOption[]);
	@Import static import24.Stream find(import1.Path, int, import26.BiPredicate, import25.FileVisitOption[]);
	@Import static import24.Stream lines(import1.Path, import20.Charset);
	@Import static import24.Stream lines(import1.Path);
	@Import import12.Class getClass();
	@Import int hashCode();
	@Import bool equals(IJavaObject);
	@Import @JavaName("toString") string toString_();
	override string toString() { return toString_(); }
	@Import void notify();
	@Import void notifyAll();
	@Import void wait(long);
	@Import void wait(long, int);
	@Import void wait();
	mixin IJavaObjectImplementation!(false);
	public static immutable string _javaParameterString = "Ljava/nio/file/Files;";
}



