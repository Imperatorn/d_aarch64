module android.java.javax.microedition.khronos.opengles.GL11_d_interface;
import arsd.jni : IJavaObjectImplementation, JavaPackageId, JavaName, IJavaObject, ImportExportImpl, JavaInterfaceMembers;
static import arsd.jni;

import import0 = android.java.java.nio.Buffer_d_interface;
import import3 = android.java.java.lang.Class_d_interface;
import import2 = android.java.java.nio.IntBuffer_d_interface;
import import1 = android.java.java.nio.FloatBuffer_d_interface;

final class GL11 : IJavaObject {
	static immutable string[] _d_canCastTo = [
		"javax/microedition/khronos/opengles/GL10",
	];
	@Import void glGetPointerv(int, import0.Buffer[]);
	@Import void glBindBuffer(int, int);
	@Import void glBufferData(int, int, import0.Buffer, int);
	@Import void glBufferSubData(int, int, int, import0.Buffer);
	@Import void glClipPlanef(int, float, int[]);
	@Import void glClipPlanef(int, import1.FloatBuffer);
	@Import void glClipPlanex(int, int, int[]);
	@Import void glClipPlanex(int, import2.IntBuffer);
	@Import void glColor4ub(byte, byte, byte, byte);
	@Import void glColorPointer(int, int, int, int);
	@Import void glDeleteBuffers(int, int, int[]);
	@Import void glDeleteBuffers(int, import2.IntBuffer);
	@Import void glDrawElements(int, int, int, int);
	@Import void glGenBuffers(int, int, int[]);
	@Import void glGenBuffers(int, import2.IntBuffer);
	@Import void glGetBooleanv(int, bool, int[]);
	@Import void glGetBooleanv(int, import2.IntBuffer);
	@Import void glGetBufferParameteriv(int, int, int, int[]);
	@Import void glGetBufferParameteriv(int, int, import2.IntBuffer);
	@Import void glGetClipPlanef(int, float, int[]);
	@Import void glGetClipPlanef(int, import1.FloatBuffer);
	@Import void glGetClipPlanex(int, int, int[]);
	@Import void glGetClipPlanex(int, import2.IntBuffer);
	@Import void glGetFixedv(int, int, int[]);
	@Import void glGetFixedv(int, import2.IntBuffer);
	@Import void glGetFloatv(int, float, int[]);
	@Import void glGetFloatv(int, import1.FloatBuffer);
	@Import void glGetLightfv(int, int, float, int[]);
	@Import void glGetLightfv(int, int, import1.FloatBuffer);
	@Import void glGetLightxv(int, int, int, int[]);
	@Import void glGetLightxv(int, int, import2.IntBuffer);
	@Import void glGetMaterialfv(int, int, float, int[]);
	@Import void glGetMaterialfv(int, int, import1.FloatBuffer);
	@Import void glGetMaterialxv(int, int, int, int[]);
	@Import void glGetMaterialxv(int, int, import2.IntBuffer);
	@Import void glGetTexEnviv(int, int, int, int[]);
	@Import void glGetTexEnviv(int, int, import2.IntBuffer);
	@Import void glGetTexEnvxv(int, int, int, int[]);
	@Import void glGetTexEnvxv(int, int, import2.IntBuffer);
	@Import void glGetTexParameterfv(int, int, float, int[]);
	@Import void glGetTexParameterfv(int, int, import1.FloatBuffer);
	@Import void glGetTexParameteriv(int, int, int, int[]);
	@Import void glGetTexParameteriv(int, int, import2.IntBuffer);
	@Import void glGetTexParameterxv(int, int, int, int[]);
	@Import void glGetTexParameterxv(int, int, import2.IntBuffer);
	@Import bool glIsBuffer(int);
	@Import bool glIsEnabled(int);
	@Import bool glIsTexture(int);
	@Import void glNormalPointer(int, int, int);
	@Import void glPointParameterf(int, float);
	@Import void glPointParameterfv(int, float, int[]);
	@Import void glPointParameterfv(int, import1.FloatBuffer);
	@Import void glPointParameterx(int, int);
	@Import void glPointParameterxv(int, int, int[]);
	@Import void glPointParameterxv(int, import2.IntBuffer);
	@Import void glPointSizePointerOES(int, int, import0.Buffer);
	@Import void glTexCoordPointer(int, int, int, int);
	@Import void glTexEnvi(int, int, int);
	@Import void glTexEnviv(int, int, int, int[]);
	@Import void glTexEnviv(int, int, import2.IntBuffer);
	@Import void glTexParameterfv(int, int, float, int[]);
	@Import void glTexParameterfv(int, int, import1.FloatBuffer);
	@Import void glTexParameteri(int, int, int);
	@Import void glTexParameteriv(int, int, int, int[]);
	@Import void glTexParameteriv(int, int, import2.IntBuffer);
	@Import void glTexParameterxv(int, int, int, int[]);
	@Import void glTexParameterxv(int, int, import2.IntBuffer);
	@Import void glVertexPointer(int, int, int, int);
	@Import import3.Class getClass();
	@Import int hashCode();
	@Import bool equals(IJavaObject);
	@Import @JavaName("toString") string toString_();
	override string toString() { return toString_(); }
	@Import void notify();
	@Import void notifyAll();
	@Import void wait(long);
	@Import void wait(long, int);
	@Import void wait();
	@Import void glActiveTexture(int);
	@Import void glAlphaFunc(int, float);
	@Import void glAlphaFuncx(int, int);
	@Import void glBindTexture(int, int);
	@Import void glBlendFunc(int, int);
	@Import void glClear(int);
	@Import void glClearColor(float, float, float, float);
	@Import void glClearColorx(int, int, int, int);
	@Import void glClearDepthf(float);
	@Import void glClearDepthx(int);
	@Import void glClearStencil(int);
	@Import void glClientActiveTexture(int);
	@Import void glColor4f(float, float, float, float);
	@Import void glColor4x(int, int, int, int);
	@Import void glColorMask(bool, bool, bool, bool);
	@Import void glColorPointer(int, int, int, import0.Buffer);
	@Import void glCompressedTexImage2D(int, int, int, int, int, int, int, import0.Buffer);
	@Import void glCompressedTexSubImage2D(int, int, int, int, int, int, int, int, import0.Buffer);
	@Import void glCopyTexImage2D(int, int, int, int, int, int, int, int);
	@Import void glCopyTexSubImage2D(int, int, int, int, int, int, int, int);
	@Import void glCullFace(int);
	@Import void glDeleteTextures(int, int, int[]);
	@Import void glDeleteTextures(int, import2.IntBuffer);
	@Import void glDepthFunc(int);
	@Import void glDepthMask(bool);
	@Import void glDepthRangef(float, float);
	@Import void glDepthRangex(int, int);
	@Import void glDisable(int);
	@Import void glDisableClientState(int);
	@Import void glDrawArrays(int, int, int);
	@Import void glDrawElements(int, int, int, import0.Buffer);
	@Import void glEnable(int);
	@Import void glEnableClientState(int);
	@Import void glFinish();
	@Import void glFlush();
	@Import void glFogf(int, float);
	@Import void glFogfv(int, float, int[]);
	@Import void glFogfv(int, import1.FloatBuffer);
	@Import void glFogx(int, int);
	@Import void glFogxv(int, int, int[]);
	@Import void glFogxv(int, import2.IntBuffer);
	@Import void glFrontFace(int);
	@Import void glFrustumf(float, float, float, float, float, float);
	@Import void glFrustumx(int, int, int, int, int, int);
	@Import void glGenTextures(int, int, int[]);
	@Import void glGenTextures(int, import2.IntBuffer);
	@Import int glGetError();
	@Import void glGetIntegerv(int, int, int[]);
	@Import void glGetIntegerv(int, import2.IntBuffer);
	@Import string glGetString(int);
	@Import void glHint(int, int);
	@Import void glLightModelf(int, float);
	@Import void glLightModelfv(int, float, int[]);
	@Import void glLightModelfv(int, import1.FloatBuffer);
	@Import void glLightModelx(int, int);
	@Import void glLightModelxv(int, int, int[]);
	@Import void glLightModelxv(int, import2.IntBuffer);
	@Import void glLightf(int, int, float);
	@Import void glLightfv(int, int, float, int[]);
	@Import void glLightfv(int, int, import1.FloatBuffer);
	@Import void glLightx(int, int, int);
	@Import void glLightxv(int, int, int, int[]);
	@Import void glLightxv(int, int, import2.IntBuffer);
	@Import void glLineWidth(float);
	@Import void glLineWidthx(int);
	@Import void glLoadIdentity();
	@Import void glLoadMatrixf(float, int[]);
	@Import void glLoadMatrixf(import1.FloatBuffer);
	@Import void glLoadMatrixx(int, int[]);
	@Import void glLoadMatrixx(import2.IntBuffer);
	@Import void glLogicOp(int);
	@Import void glMaterialf(int, int, float);
	@Import void glMaterialfv(int, int, float, int[]);
	@Import void glMaterialfv(int, int, import1.FloatBuffer);
	@Import void glMaterialx(int, int, int);
	@Import void glMaterialxv(int, int, int, int[]);
	@Import void glMaterialxv(int, int, import2.IntBuffer);
	@Import void glMatrixMode(int);
	@Import void glMultMatrixf(float, int[]);
	@Import void glMultMatrixf(import1.FloatBuffer);
	@Import void glMultMatrixx(int, int[]);
	@Import void glMultMatrixx(import2.IntBuffer);
	@Import void glMultiTexCoord4f(int, float, float, float, float);
	@Import void glMultiTexCoord4x(int, int, int, int, int);
	@Import void glNormal3f(float, float, float);
	@Import void glNormal3x(int, int, int);
	@Import void glNormalPointer(int, int, import0.Buffer);
	@Import void glOrthof(float, float, float, float, float, float);
	@Import void glOrthox(int, int, int, int, int, int);
	@Import void glPixelStorei(int, int);
	@Import void glPointSize(float);
	@Import void glPointSizex(int);
	@Import void glPolygonOffset(float, float);
	@Import void glPolygonOffsetx(int, int);
	@Import void glPopMatrix();
	@Import void glPushMatrix();
	@Import void glReadPixels(int, int, int, int, int, int, import0.Buffer);
	@Import void glRotatef(float, float, float, float);
	@Import void glRotatex(int, int, int, int);
	@Import void glSampleCoverage(float, bool);
	@Import void glSampleCoveragex(int, bool);
	@Import void glScalef(float, float, float);
	@Import void glScalex(int, int, int);
	@Import void glScissor(int, int, int, int);
	@Import void glShadeModel(int);
	@Import void glStencilFunc(int, int, int);
	@Import void glStencilMask(int);
	@Import void glStencilOp(int, int, int);
	@Import void glTexCoordPointer(int, int, int, import0.Buffer);
	@Import void glTexEnvf(int, int, float);
	@Import void glTexEnvfv(int, int, float, int[]);
	@Import void glTexEnvfv(int, int, import1.FloatBuffer);
	@Import void glTexEnvx(int, int, int);
	@Import void glTexEnvxv(int, int, int, int[]);
	@Import void glTexEnvxv(int, int, import2.IntBuffer);
	@Import void glTexImage2D(int, int, int, int, int, int, int, int, import0.Buffer);
	@Import void glTexParameterf(int, int, float);
	@Import void glTexParameterx(int, int, int);
	@Import void glTexSubImage2D(int, int, int, int, int, int, int, int, import0.Buffer);
	@Import void glTranslatef(float, float, float);
	@Import void glTranslatex(int, int, int);
	@Import void glVertexPointer(int, int, int, import0.Buffer);
	@Import void glViewport(int, int, int, int);
	mixin IJavaObjectImplementation!(false);
	public static immutable string _javaParameterString = "Ljavax/microedition/khronos/opengles/GL11;";
}



