module android.java.android.renderscript.Allocation_d_interface;
import arsd.jni : IJavaObjectImplementation, JavaPackageId, JavaName, IJavaObject, ImportExportImpl, JavaInterfaceMembers;
static import arsd.jni;

import import3 = android.java.android.graphics.Bitmap_d_interface;
import import9 = android.java.android.view.Surface_d_interface;
import import5 = android.java.android.renderscript.FieldPacker_d_interface;
import import2 = android.java.android.renderscript.BaseObj_d_interface;
import import6 = android.java.android.renderscript.RenderScript_d_interface;
import import11 = android.java.android.renderscript.Allocation_OnBufferAvailableListener_d_interface;
import import7 = android.java.android.renderscript.Allocation_MipmapControl_d_interface;
import import10 = android.java.android.content.res.Resources_d_interface;
import import12 = android.java.java.lang.Class_d_interface;
import import1 = android.java.android.renderscript.Type_d_interface;
import import0 = android.java.android.renderscript.Element_d_interface;
import import8 = android.java.java.nio.ByteBuffer_d_interface;
import import4 = android.java.android.renderscript.Allocation_d_interface;

final class Allocation : IJavaObject {
	static immutable string[] _d_canCastTo = [
	];
	@Import import0.Element getElement();
	@Import int getUsage();
	@Import void setAutoPadding(bool);
	@Import int getBytesSize();
	@Import import1.Type getType();
	@Import void syncAll(int);
	@Import void ioSend();
	@Import void ioReceive();
	@Import void copyFrom(import2.BaseObj[]);
	@Import void copyFromUnchecked(IJavaObject);
	@Import void copyFromUnchecked(int[]);
	@Import void copyFromUnchecked(short[]);
	@Import void copyFromUnchecked(byte[]);
	@Import void copyFromUnchecked(float[]);
	@Import void copyFrom(IJavaObject);
	@Import void copyFrom(int[]);
	@Import void copyFrom(short[]);
	@Import void copyFrom(byte[]);
	@Import void copyFrom(float[]);
	@Import void copyFrom(import3.Bitmap);
	@Import void copyFrom(import4.Allocation);
	@Import void setFromFieldPacker(int, import5.FieldPacker);
	@Import void setFromFieldPacker(int, int, import5.FieldPacker);
	@Import void setFromFieldPacker(int, int, int, int, import5.FieldPacker);
	@Import void generateMipmaps();
	@Import void copy1DRangeFromUnchecked(int, int, IJavaObject);
	@Import void copy1DRangeFromUnchecked(int, int, int[]);
	@Import void copy1DRangeFromUnchecked(int, int, short[]);
	@Import void copy1DRangeFromUnchecked(int, int, byte[]);
	@Import void copy1DRangeFromUnchecked(int, int, float[]);
	@Import void copy1DRangeFrom(int, int, IJavaObject);
	@Import void copy1DRangeFrom(int, int, int[]);
	@Import void copy1DRangeFrom(int, int, short[]);
	@Import void copy1DRangeFrom(int, int, byte[]);
	@Import void copy1DRangeFrom(int, int, float[]);
	@Import void copy1DRangeFrom(int, int, import4.Allocation, int);
	@Import void copy2DRangeFrom(int, int, int, int, IJavaObject);
	@Import void copy2DRangeFrom(int, int, int, int, byte[]);
	@Import void copy2DRangeFrom(int, int, int, int, short[]);
	@Import void copy2DRangeFrom(int, int, int, int, int[]);
	@Import void copy2DRangeFrom(int, int, int, int, float[]);
	@Import void copy2DRangeFrom(int, int, int, int, import4.Allocation, int, int);
	@Import void copy2DRangeFrom(int, int, import3.Bitmap);
	@Import void copy3DRangeFrom(int, int, int, int, int, int, IJavaObject);
	@Import void copy3DRangeFrom(int, int, int, int, int, int, import4.Allocation, int, int, int);
	@Import void copyTo(import3.Bitmap);
	@Import void copyTo(IJavaObject);
	@Import void copyTo(byte[]);
	@Import void copyTo(short[]);
	@Import void copyTo(int[]);
	@Import void copyTo(float[]);
	@Import void resize(int);
	@Import void copy1DRangeToUnchecked(int, int, IJavaObject);
	@Import void copy1DRangeToUnchecked(int, int, int[]);
	@Import void copy1DRangeToUnchecked(int, int, short[]);
	@Import void copy1DRangeToUnchecked(int, int, byte[]);
	@Import void copy1DRangeToUnchecked(int, int, float[]);
	@Import void copy1DRangeTo(int, int, IJavaObject);
	@Import void copy1DRangeTo(int, int, int[]);
	@Import void copy1DRangeTo(int, int, short[]);
	@Import void copy1DRangeTo(int, int, byte[]);
	@Import void copy1DRangeTo(int, int, float[]);
	@Import void copy2DRangeTo(int, int, int, int, IJavaObject);
	@Import void copy2DRangeTo(int, int, int, int, byte[]);
	@Import void copy2DRangeTo(int, int, int, int, short[]);
	@Import void copy2DRangeTo(int, int, int, int, int[]);
	@Import void copy2DRangeTo(int, int, int, int, float[]);
	@Import void copy3DRangeTo(int, int, int, int, int, int, IJavaObject);
	@Import static import4.Allocation createTyped(import6.RenderScript, import1.Type, import7.Allocation_MipmapControl, int);
	@Import static import4.Allocation createTyped(import6.RenderScript, import1.Type, int);
	@Import static import4.Allocation createTyped(import6.RenderScript, import1.Type);
	@Import static import4.Allocation createSized(import6.RenderScript, import0.Element, int, int);
	@Import static import4.Allocation createSized(import6.RenderScript, import0.Element, int);
	@Import static import4.Allocation createFromBitmap(import6.RenderScript, import3.Bitmap, import7.Allocation_MipmapControl, int);
	@Import import8.ByteBuffer getByteBuffer();
	@Import static import4.Allocation[] createAllocations(import6.RenderScript, import1.Type, int, int);
	@Import long getStride();
	@Import long getTimeStamp();
	@Import import9.Surface getSurface();
	@Import void setSurface(import9.Surface);
	@Import static import4.Allocation createFromBitmap(import6.RenderScript, import3.Bitmap);
	@Import static import4.Allocation createCubemapFromBitmap(import6.RenderScript, import3.Bitmap, import7.Allocation_MipmapControl, int);
	@Import static import4.Allocation createCubemapFromBitmap(import6.RenderScript, import3.Bitmap);
	@Import static import4.Allocation createCubemapFromCubeFaces(import6.RenderScript, import3.Bitmap, import3.Bitmap, import3.Bitmap, import3.Bitmap, import3.Bitmap, import3.Bitmap, import7.Allocation_MipmapControl, int);
	@Import static import4.Allocation createCubemapFromCubeFaces(import6.RenderScript, import3.Bitmap, import3.Bitmap, import3.Bitmap, import3.Bitmap, import3.Bitmap, import3.Bitmap);
	@Import static import4.Allocation createFromBitmapResource(import6.RenderScript, import10.Resources, int, import7.Allocation_MipmapControl, int);
	@Import static import4.Allocation createFromBitmapResource(import6.RenderScript, import10.Resources, int);
	@Import static import4.Allocation createFromString(import6.RenderScript, string, int);
	@Import void setOnBufferAvailableListener(import11.Allocation_OnBufferAvailableListener);
	@Import void destroy();
	@Import void setName(string);
	@Import string getName();
	@Import int hashCode();
	@Import bool equals(IJavaObject);
	@Import import12.Class getClass();
	@Import @JavaName("toString") string toString_();
	override string toString() { return arsd.jni.javaObjectToString(this); }
	@Import void notify();
	@Import void notifyAll();
	@Import void wait(long);
	@Import void wait(long, int);
	@Import void wait();
	mixin IJavaObjectImplementation!(false);
	public static immutable string _javaParameterString = "Landroid/renderscript/Allocation;";
}



