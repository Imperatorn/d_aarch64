module android.java.android.app.admin.DevicePolicyManager_d_interface;
import arsd.jni : IJavaObjectImplementation, JavaPackageId, JavaName, IJavaObject, ImportExportImpl;

import import12 = android.java.android.content.Intent_d_interface;
import import13 = android.java.android.graphics.Bitmap_d_interface;
import import2 = android.java.java.lang.CharSequence_d_interface;
import import20 = android.java.android.app.admin.DevicePolicyManager_OnClearApplicationUserDataListener_d_interface;
import import7 = android.java.android.security.keystore.KeyGenParameterSpec_d_interface;
import import14 = android.java.android.app.admin.SystemUpdatePolicy_d_interface;
import import16 = android.java.android.app.admin.DevicePolicyManager_d_interface;
import import8 = android.java.android.content.IntentFilter_d_interface;
import import18 = android.java.android.content.ServiceConnection_d_interface;
import import0 = android.java.android.content.ComponentName_d_interface;
import import17 = android.java.java.util.Set_d_interface;
import import15 = android.java.android.app.admin.SystemUpdateInfo_d_interface;
import import3 = android.java.android.net.ProxyInfo_d_interface;
import import6 = android.java.android.security.AttestedKeyPair_d_interface;
import import10 = android.java.android.os.PersistableBundle_d_interface;
import import9 = android.java.android.os.Bundle_d_interface;
import import21 = android.java.android.telephony.data.ApnSetting_d_interface;
import import4 = android.java.java.security.PrivateKey_d_interface;
import import19 = android.java.java.util.concurrent.Executor_d_interface;
import import1 = android.java.java.util.List_d_interface;
import import11 = android.java.android.os.UserHandle_d_interface;
import import5 = android.java.java.security.cert.Certificate_d_interface;

final class DevicePolicyManager : IJavaObject {
	@Import bool isAdminActive(import0.ComponentName);
	@Import import1.List getActiveAdmins();
	@Import void removeActiveAdmin(import0.ComponentName);
	@Import bool hasGrantedPolicy(import0.ComponentName, int);
	@Import void setPasswordQuality(import0.ComponentName, int);
	@Import int getPasswordQuality(import0.ComponentName);
	@Import void setPasswordMinimumLength(import0.ComponentName, int);
	@Import int getPasswordMinimumLength(import0.ComponentName);
	@Import void setPasswordMinimumUpperCase(import0.ComponentName, int);
	@Import int getPasswordMinimumUpperCase(import0.ComponentName);
	@Import void setPasswordMinimumLowerCase(import0.ComponentName, int);
	@Import int getPasswordMinimumLowerCase(import0.ComponentName);
	@Import void setPasswordMinimumLetters(import0.ComponentName, int);
	@Import int getPasswordMinimumLetters(import0.ComponentName);
	@Import void setPasswordMinimumNumeric(import0.ComponentName, int);
	@Import int getPasswordMinimumNumeric(import0.ComponentName);
	@Import void setPasswordMinimumSymbols(import0.ComponentName, int);
	@Import int getPasswordMinimumSymbols(import0.ComponentName);
	@Import void setPasswordMinimumNonLetter(import0.ComponentName, int);
	@Import int getPasswordMinimumNonLetter(import0.ComponentName);
	@Import void setPasswordHistoryLength(import0.ComponentName, int);
	@Import void setPasswordExpirationTimeout(import0.ComponentName, long);
	@Import long getPasswordExpirationTimeout(import0.ComponentName);
	@Import long getPasswordExpiration(import0.ComponentName);
	@Import int getPasswordHistoryLength(import0.ComponentName);
	@Import int getPasswordMaximumLength(int);
	@Import bool isActivePasswordSufficient();
	@Import bool isUsingUnifiedPassword(import0.ComponentName);
	@Import int getCurrentFailedPasswordAttempts();
	@Import void setMaximumFailedPasswordsForWipe(import0.ComponentName, int);
	@Import int getMaximumFailedPasswordsForWipe(import0.ComponentName);
	@Import bool resetPassword(string, int);
	@Import bool setResetPasswordToken(import0.ComponentName, byte[]);
	@Import bool clearResetPasswordToken(import0.ComponentName);
	@Import bool isResetPasswordTokenActive(import0.ComponentName);
	@Import bool resetPasswordWithToken(import0.ComponentName, string, byte, int[]);
	@Import void setMaximumTimeToLock(import0.ComponentName, long);
	@Import long getMaximumTimeToLock(import0.ComponentName);
	@Import void setRequiredStrongAuthTimeout(import0.ComponentName, long);
	@Import long getRequiredStrongAuthTimeout(import0.ComponentName);
	@Import void lockNow();
	@Import void lockNow(int);
	@Import void wipeData(int);
	@Import void wipeData(int, import2.CharSequence);
	@Import void setRecommendedGlobalProxy(import0.ComponentName, import3.ProxyInfo);
	@Import int setStorageEncryption(import0.ComponentName, bool);
	@Import bool getStorageEncryption(import0.ComponentName);
	@Import int getStorageEncryptionStatus();
	@Import bool installCaCert(import0.ComponentName, byte[]);
	@Import void uninstallCaCert(import0.ComponentName, byte[]);
	@Import import1.List getInstalledCaCerts(import0.ComponentName);
	@Import void uninstallAllUserCaCerts(import0.ComponentName);
	@Import bool hasCaCertInstalled(import0.ComponentName, byte[]);
	@Import bool installKeyPair(import0.ComponentName, import4.PrivateKey, import5.Certificate, string);
	@Import bool installKeyPair(import0.ComponentName, import4.PrivateKey, import5.Certificate, string, bool[]);
	@Import bool installKeyPair(import0.ComponentName, import4.PrivateKey, import5.Certificate, string, int[]);
	@Import bool removeKeyPair(import0.ComponentName, string);
	@Import import6.AttestedKeyPair generateKeyPair(import0.ComponentName, string, import7.KeyGenParameterSpec, int);
	@Import bool isDeviceIdAttestationSupported();
	@Import bool setKeyPairCertificate(import0.ComponentName, string, import1.List, bool);
	@Import void setCertInstallerPackage(import0.ComponentName, string);
	@Import string getCertInstallerPackage(import0.ComponentName);
	@Import void setDelegatedScopes(import0.ComponentName, string, import1.List);
	@Import import1.List getDelegatedScopes(import0.ComponentName, string);
	@Import import1.List getDelegatePackages(import0.ComponentName, string);
	@Import void setAlwaysOnVpnPackage(import0.ComponentName, string, bool);
	@Import string getAlwaysOnVpnPackage(import0.ComponentName);
	@Import void setCameraDisabled(import0.ComponentName, bool);
	@Import bool getCameraDisabled(import0.ComponentName);
	@Import bool requestBugreport(import0.ComponentName);
	@Import void setScreenCaptureDisabled(import0.ComponentName, bool);
	@Import bool getScreenCaptureDisabled(import0.ComponentName);
	@Import void setAutoTimeRequired(import0.ComponentName, bool);
	@Import bool getAutoTimeRequired();
	@Import void setKeyguardDisabledFeatures(import0.ComponentName, int);
	@Import int getKeyguardDisabledFeatures(import0.ComponentName);
	@Import bool isDeviceOwnerApp(string);
	@Import void clearDeviceOwnerApp(string);
	@Import void clearProfileOwner(import0.ComponentName);
	@Import void setDeviceOwnerLockScreenInfo(import0.ComponentName, import2.CharSequence);
	@Import import2.CharSequence getDeviceOwnerLockScreenInfo();
	@Import string[] setPackagesSuspended(import0.ComponentName, string, bool[]);
	@Import bool isPackageSuspended(import0.ComponentName, string);
	@Import void setProfileEnabled(import0.ComponentName);
	@Import void setProfileName(import0.ComponentName, string);
	@Import bool isProfileOwnerApp(string);
	@Import void addPersistentPreferredActivity(import0.ComponentName, import8.IntentFilter, import0.ComponentName);
	@Import void clearPackagePersistentPreferredActivities(import0.ComponentName, string);
	@Import void setApplicationRestrictionsManagingPackage(import0.ComponentName, string);
	@Import string getApplicationRestrictionsManagingPackage(import0.ComponentName);
	@Import bool isCallerApplicationRestrictionsManagingPackage();
	@Import void setApplicationRestrictions(import0.ComponentName, string, import9.Bundle);
	@Import void setTrustAgentConfiguration(import0.ComponentName, import0.ComponentName, import10.PersistableBundle);
	@Import import1.List getTrustAgentConfiguration(import0.ComponentName, import0.ComponentName);
	@Import void setCrossProfileCallerIdDisabled(import0.ComponentName, bool);
	@Import bool getCrossProfileCallerIdDisabled(import0.ComponentName);
	@Import void setCrossProfileContactsSearchDisabled(import0.ComponentName, bool);
	@Import bool getCrossProfileContactsSearchDisabled(import0.ComponentName);
	@Import void setBluetoothContactSharingDisabled(import0.ComponentName, bool);
	@Import bool getBluetoothContactSharingDisabled(import0.ComponentName);
	@Import void addCrossProfileIntentFilter(import0.ComponentName, import8.IntentFilter, int);
	@Import void clearCrossProfileIntentFilters(import0.ComponentName);
	@Import bool setPermittedAccessibilityServices(import0.ComponentName, import1.List);
	@Import import1.List getPermittedAccessibilityServices(import0.ComponentName);
	@Import bool setPermittedInputMethods(import0.ComponentName, import1.List);
	@Import import1.List getPermittedInputMethods(import0.ComponentName);
	@Import bool setPermittedCrossProfileNotificationListeners(import0.ComponentName, import1.List);
	@Import import1.List getPermittedCrossProfileNotificationListeners(import0.ComponentName);
	@Import import1.List getKeepUninstalledPackages(import0.ComponentName);
	@Import void setKeepUninstalledPackages(import0.ComponentName, import1.List);
	@Import import11.UserHandle createAndManageUser(import0.ComponentName, string, import0.ComponentName, import10.PersistableBundle, int);
	@Import bool removeUser(import0.ComponentName, import11.UserHandle);
	@Import bool switchUser(import0.ComponentName, import11.UserHandle);
	@Import int startUserInBackground(import0.ComponentName, import11.UserHandle);
	@Import int stopUser(import0.ComponentName, import11.UserHandle);
	@Import int logoutUser(import0.ComponentName);
	@Import import1.List getSecondaryUsers(import0.ComponentName);
	@Import bool isEphemeralUser(import0.ComponentName);
	@Import import9.Bundle getApplicationRestrictions(import0.ComponentName, string);
	@Import void addUserRestriction(import0.ComponentName, string);
	@Import void clearUserRestriction(import0.ComponentName, string);
	@Import import9.Bundle getUserRestrictions(import0.ComponentName);
	@Import import12.Intent createAdminSupportIntent(string);
	@Import bool setApplicationHidden(import0.ComponentName, string, bool);
	@Import bool isApplicationHidden(import0.ComponentName, string);
	@Import void enableSystemApp(import0.ComponentName, string);
	@Import int enableSystemApp(import0.ComponentName, import12.Intent);
	@Import bool installExistingPackage(import0.ComponentName, string);
	@Import void setAccountManagementDisabled(import0.ComponentName, string, bool);
	@Import string[] getAccountTypesWithManagementDisabled();
	@Import void setLockTaskPackages(import0.ComponentName, string[]);
	@Import string[] getLockTaskPackages(import0.ComponentName);
	@Import bool isLockTaskPermitted(string);
	@Import void setLockTaskFeatures(import0.ComponentName, int);
	@Import int getLockTaskFeatures(import0.ComponentName);
	@Import void setGlobalSetting(import0.ComponentName, string, string);
	@Import void setSystemSetting(import0.ComponentName, string, string);
	@Import bool setTime(import0.ComponentName, long);
	@Import bool setTimeZone(import0.ComponentName, string);
	@Import void setSecureSetting(import0.ComponentName, string, string);
	@Import void setRestrictionsProvider(import0.ComponentName, import0.ComponentName);
	@Import void setMasterVolumeMuted(import0.ComponentName, bool);
	@Import bool isMasterVolumeMuted(import0.ComponentName);
	@Import void setUninstallBlocked(import0.ComponentName, string, bool);
	@Import bool isUninstallBlocked(import0.ComponentName, string);
	@Import bool addCrossProfileWidgetProvider(import0.ComponentName, string);
	@Import bool removeCrossProfileWidgetProvider(import0.ComponentName, string);
	@Import import1.List getCrossProfileWidgetProviders(import0.ComponentName);
	@Import void setUserIcon(import0.ComponentName, import13.Bitmap);
	@Import void setSystemUpdatePolicy(import0.ComponentName, import14.SystemUpdatePolicy);
	@Import import14.SystemUpdatePolicy getSystemUpdatePolicy();
	@Import bool setKeyguardDisabled(import0.ComponentName, bool);
	@Import bool setStatusBarDisabled(import0.ComponentName, bool);
	@Import import15.SystemUpdateInfo getPendingSystemUpdate(import0.ComponentName);
	@Import void setPermissionPolicy(import0.ComponentName, int);
	@Import int getPermissionPolicy(import0.ComponentName);
	@Import bool setPermissionGrantState(import0.ComponentName, string, string, int);
	@Import int getPermissionGrantState(import0.ComponentName, string, string);
	@Import bool isProvisioningAllowed(string);
	@Import bool isManagedProfile(import0.ComponentName);
	@Import string getWifiMacAddress(import0.ComponentName);
	@Import void reboot(import0.ComponentName);
	@Import void setShortSupportMessage(import0.ComponentName, import2.CharSequence);
	@Import import2.CharSequence getShortSupportMessage(import0.ComponentName);
	@Import void setLongSupportMessage(import0.ComponentName, import2.CharSequence);
	@Import import2.CharSequence getLongSupportMessage(import0.ComponentName);
	@Import import16.DevicePolicyManager getParentProfileInstance(import0.ComponentName);
	@Import void setSecurityLoggingEnabled(import0.ComponentName, bool);
	@Import bool isSecurityLoggingEnabled(import0.ComponentName);
	@Import import1.List retrieveSecurityLogs(import0.ComponentName);
	@Import import1.List setMeteredDataDisabledPackages(import0.ComponentName, import1.List);
	@Import import1.List getMeteredDataDisabledPackages(import0.ComponentName);
	@Import import1.List retrievePreRebootSecurityLogs(import0.ComponentName);
	@Import void setOrganizationColor(import0.ComponentName, int);
	@Import int getOrganizationColor(import0.ComponentName);
	@Import void setOrganizationName(import0.ComponentName, import2.CharSequence);
	@Import import2.CharSequence getOrganizationName(import0.ComponentName);
	@Import void setAffiliationIds(import0.ComponentName, import17.Set);
	@Import import17.Set getAffiliationIds(import0.ComponentName);
	@Import bool isAffiliatedUser();
	@Import void setBackupServiceEnabled(import0.ComponentName, bool);
	@Import bool isBackupServiceEnabled(import0.ComponentName);
	@Import void setNetworkLoggingEnabled(import0.ComponentName, bool);
	@Import bool isNetworkLoggingEnabled(import0.ComponentName);
	@Import import1.List retrieveNetworkLogs(import0.ComponentName, long);
	@Import bool bindDeviceAdminServiceAsUser(import0.ComponentName, import12.Intent, import18.ServiceConnection, int, import11.UserHandle);
	@Import import1.List getBindDeviceAdminTargetUsers(import0.ComponentName);
	@Import void clearApplicationUserData(import0.ComponentName, string, import19.Executor, import20.DevicePolicyManager_OnClearApplicationUserDataListener);
	@Import void setLogoutEnabled(import0.ComponentName, bool);
	@Import bool isLogoutEnabled();
	@Import void transferOwnership(import0.ComponentName, import0.ComponentName, import10.PersistableBundle);
	@Import void setStartUserSessionMessage(import0.ComponentName, import2.CharSequence);
	@Import void setEndUserSessionMessage(import0.ComponentName, import2.CharSequence);
	@Import import2.CharSequence getStartUserSessionMessage(import0.ComponentName);
	@Import import2.CharSequence getEndUserSessionMessage(import0.ComponentName);
	@Import int addOverrideApn(import0.ComponentName, import21.ApnSetting);
	@Import bool updateOverrideApn(import0.ComponentName, int, import21.ApnSetting);
	@Import bool removeOverrideApn(import0.ComponentName, int);
	@Import import1.List getOverrideApns(import0.ComponentName);
	@Import void setOverrideApnsEnabled(import0.ComponentName, bool);
	@Import bool isOverrideApnEnabled(import0.ComponentName);
	@Import import10.PersistableBundle getTransferOwnershipBundle();
	mixin IJavaObjectImplementation!(false);
	mixin JavaPackageId!("android.app.admin", "DevicePolicyManager");
}
