module android.java.android.icu.lang.UCharacter_d_interface;
import arsd.jni : IJavaObjectImplementation, JavaPackageId, JavaName, IJavaObject, ImportExportImpl, JavaInterfaceMembers;
static import arsd.jni;

import import4 = android.java.android.icu.util.ULocale_d_interface;
import import1 = android.java.java.lang.CharSequence_d_interface;
import import3 = android.java.java.util.Locale_d_interface;
import import6 = android.java.android.icu.util.ValueIterator_d_interface;
import import7 = android.java.java.lang.Class_d_interface;
import import0 = android.java.android.icu.util.VersionInfo_d_interface;
import import2 = android.java.android.icu.text.BreakIterator_d_interface;
import import5 = android.java.android.icu.util.RangeValueIterator_d_interface;

final class UCharacter : IJavaObject {
	static immutable string[] _d_canCastTo = [
		"android/icu/lang/UCharacterEnums$ECharacterCategory",
		"android/icu/lang/UCharacterEnums$ECharacterDirection",
	];
	@Import static int digit(int, int);
	@Import static int digit(int);
	@Import static int getNumericValue(int);
	@Import static double getUnicodeNumericValue(int);
	@Import static int getType(int);
	@Import static bool isDefined(int);
	@Import static bool isDigit(int);
	@Import static bool isISOControl(int);
	@Import static bool isLetter(int);
	@Import static bool isLetterOrDigit(int);
	@Import static bool isJavaIdentifierStart(int);
	@Import static bool isJavaIdentifierPart(int);
	@Import static bool isLowerCase(int);
	@Import static bool isWhitespace(int);
	@Import static bool isSpaceChar(int);
	@Import static bool isTitleCase(int);
	@Import static bool isUnicodeIdentifierPart(int);
	@Import static bool isUnicodeIdentifierStart(int);
	@Import static bool isIdentifierIgnorable(int);
	@Import static bool isUpperCase(int);
	@Import static int toLowerCase(int);
	@Import static @JavaName("toString") string toString_(int);
	@Import static int toTitleCase(int);
	@Import static int toUpperCase(int);
	@Import static bool isSupplementary(int);
	@Import static bool isBMP(int);
	@Import static bool isPrintable(int);
	@Import static bool isBaseForm(int);
	@Import static int getDirection(int);
	@Import static bool isMirrored(int);
	@Import static int getMirror(int);
	@Import static int getBidiPairedBracket(int);
	@Import static int getCombiningClass(int);
	@Import static bool isLegal(int);
	@Import static bool isLegal(string);
	@Import static import0.VersionInfo getUnicodeVersion();
	@Import static string getName(int);
	@Import static string getName(string, string);
	@Import static string getExtendedName(int);
	@Import static string getNameAlias(int);
	@Import static int getCharFromName(string);
	@Import static int getCharFromExtendedName(string);
	@Import static int getCharFromNameAlias(string);
	@Import static string getPropertyName(int, int);
	@Import static int getPropertyEnum(import1.CharSequence);
	@Import static string getPropertyValueName(int, int, int);
	@Import static int getPropertyValueEnum(int, import1.CharSequence);
	@Import static int getCodePoint(wchar, wchar);
	@Import static int getCodePoint(wchar);
	@Import static string toUpperCase(string);
	@Import static string toLowerCase(string);
	@Import static string toTitleCase(string, import2.BreakIterator);
	@Import static string toUpperCase(import3.Locale, string);
	@Import static string toUpperCase(import4.ULocale, string);
	@Import static string toLowerCase(import3.Locale, string);
	@Import static string toLowerCase(import4.ULocale, string);
	@Import static string toTitleCase(import3.Locale, string, import2.BreakIterator);
	@Import static string toTitleCase(import4.ULocale, string, import2.BreakIterator);
	@Import static string toTitleCase(import4.ULocale, string, import2.BreakIterator, int);
	@Import static string toTitleCase(import3.Locale, string, import2.BreakIterator, int);
	@Import static int foldCase(int, bool);
	@Import static string foldCase(string, bool);
	@Import static int foldCase(int, int);
	@Import static string foldCase(string, int);
	@Import static int getHanNumericValue(int);
	@Import static import5.RangeValueIterator getTypeIterator();
	@Import static import6.ValueIterator getNameIterator();
	@Import static import6.ValueIterator getExtendedNameIterator();
	@Import static import0.VersionInfo getAge(int);
	@Import static bool hasBinaryProperty(int, int);
	@Import static bool isUAlphabetic(int);
	@Import static bool isULowercase(int);
	@Import static bool isUUppercase(int);
	@Import static bool isUWhiteSpace(int);
	@Import static int getIntPropertyValue(int, int);
	@Import static int getIntPropertyMinValue(int);
	@Import static int getIntPropertyMaxValue(int);
	@Import static wchar forDigit(int, int);
	@Import static bool isValidCodePoint(int);
	@Import static bool isSupplementaryCodePoint(int);
	@Import static bool isHighSurrogate(wchar);
	@Import static bool isLowSurrogate(wchar);
	@Import static bool isSurrogatePair(wchar, wchar);
	@Import static int charCount(int);
	@Import static int toCodePoint(wchar, wchar);
	@Import static int codePointAt(import1.CharSequence, int);
	@Import static int codePointAt(wchar, int[]);
	@Import static int codePointAt(wchar, int, int[]);
	@Import static int codePointBefore(import1.CharSequence, int);
	@Import static int codePointBefore(wchar, int[]);
	@Import static int codePointBefore(wchar, int, int[]);
	@Import static int toChars(int, wchar, int[]);
	@Import static wchar[] toChars(int);
	@Import static byte getDirectionality(int);
	@Import static int codePointCount(import1.CharSequence, int, int);
	@Import static int codePointCount(wchar, int, int[]);
	@Import static int offsetByCodePoints(import1.CharSequence, int, int);
	@Import static int offsetByCodePoints(wchar, int, int, int, int[]);
	@Import import7.Class getClass();
	@Import int hashCode();
	@Import bool equals(IJavaObject);
	@Import @JavaName("toString") string toString_();
	override string toString() { return arsd.jni.javaObjectToString(this); }
	@Import void notify();
	@Import void notifyAll();
	@Import void wait(long);
	@Import void wait(long, int);
	@Import void wait();
	mixin IJavaObjectImplementation!(false);
	public static immutable string _javaParameterString = "Landroid/icu/lang/UCharacter;";
}



