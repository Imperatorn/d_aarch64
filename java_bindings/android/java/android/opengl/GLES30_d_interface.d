module android.java.android.opengl.GLES30_d_interface;
import arsd.jni : IJavaObjectImplementation, JavaPackageId, JavaName, IJavaObject, ImportExportImpl;

import import0 = android.java.java.nio.Buffer_d_interface;
import import1 = android.java.java.nio.IntBuffer_d_interface;
import import2 = android.java.java.nio.FloatBuffer_d_interface;
import import4 = android.java.java.nio.LongBuffer_d_interface;
import import3 = android.java.java.nio.ByteBuffer_d_interface;

final class GLES30 : IJavaObject {
	@Import static void glReadBuffer(int);
	@Import static void glDrawRangeElements(int, int, int, int, int, import0.Buffer);
	@Import static void glDrawRangeElements(int, int, int, int, int, int);
	@Import static void glTexImage3D(int, int, int, int, int, int, int, int, int, import0.Buffer);
	@Import static void glTexImage3D(int, int, int, int, int, int, int, int, int, int);
	@Import static void glTexSubImage3D(int, int, int, int, int, int, int, int, int, int, import0.Buffer);
	@Import static void glTexSubImage3D(int, int, int, int, int, int, int, int, int, int, int);
	@Import static void glCopyTexSubImage3D(int, int, int, int, int, int, int, int, int);
	@Import static void glCompressedTexImage3D(int, int, int, int, int, int, int, int, import0.Buffer);
	@Import static void glCompressedTexImage3D(int, int, int, int, int, int, int, int, int);
	@Import static void glCompressedTexSubImage3D(int, int, int, int, int, int, int, int, int, int, import0.Buffer);
	@Import static void glCompressedTexSubImage3D(int, int, int, int, int, int, int, int, int, int, int);
	@Import static void glGenQueries(int, int, int[]);
	@Import static void glGenQueries(int, import1.IntBuffer);
	@Import static void glDeleteQueries(int, int, int[]);
	@Import static void glDeleteQueries(int, import1.IntBuffer);
	@Import static bool glIsQuery(int);
	@Import static void glBeginQuery(int, int);
	@Import static void glEndQuery(int);
	@Import static void glGetQueryiv(int, int, int, int[]);
	@Import static void glGetQueryiv(int, int, import1.IntBuffer);
	@Import static void glGetQueryObjectuiv(int, int, int, int[]);
	@Import static void glGetQueryObjectuiv(int, int, import1.IntBuffer);
	@Import static bool glUnmapBuffer(int);
	@Import static import0.Buffer glGetBufferPointerv(int, int);
	@Import static void glDrawBuffers(int, int, int[]);
	@Import static void glDrawBuffers(int, import1.IntBuffer);
	@Import static void glUniformMatrix2x3fv(int, int, bool, float, int[]);
	@Import static void glUniformMatrix2x3fv(int, int, bool, import2.FloatBuffer);
	@Import static void glUniformMatrix3x2fv(int, int, bool, float, int[]);
	@Import static void glUniformMatrix3x2fv(int, int, bool, import2.FloatBuffer);
	@Import static void glUniformMatrix2x4fv(int, int, bool, float, int[]);
	@Import static void glUniformMatrix2x4fv(int, int, bool, import2.FloatBuffer);
	@Import static void glUniformMatrix4x2fv(int, int, bool, float, int[]);
	@Import static void glUniformMatrix4x2fv(int, int, bool, import2.FloatBuffer);
	@Import static void glUniformMatrix3x4fv(int, int, bool, float, int[]);
	@Import static void glUniformMatrix3x4fv(int, int, bool, import2.FloatBuffer);
	@Import static void glUniformMatrix4x3fv(int, int, bool, float, int[]);
	@Import static void glUniformMatrix4x3fv(int, int, bool, import2.FloatBuffer);
	@Import static void glBlitFramebuffer(int, int, int, int, int, int, int, int, int, int);
	@Import static void glRenderbufferStorageMultisample(int, int, int, int, int);
	@Import static void glFramebufferTextureLayer(int, int, int, int, int);
	@Import static import0.Buffer glMapBufferRange(int, int, int, int);
	@Import static void glFlushMappedBufferRange(int, int, int);
	@Import static void glBindVertexArray(int);
	@Import static void glDeleteVertexArrays(int, int, int[]);
	@Import static void glDeleteVertexArrays(int, import1.IntBuffer);
	@Import static void glGenVertexArrays(int, int, int[]);
	@Import static void glGenVertexArrays(int, import1.IntBuffer);
	@Import static bool glIsVertexArray(int);
	@Import static void glGetIntegeri_v(int, int, int, int[]);
	@Import static void glGetIntegeri_v(int, int, import1.IntBuffer);
	@Import static void glBeginTransformFeedback(int);
	@Import static void glEndTransformFeedback();
	@Import static void glBindBufferRange(int, int, int, int, int);
	@Import static void glBindBufferBase(int, int, int);
	@Import static void glTransformFeedbackVaryings(int, string, int[]);
	@Import static void glGetTransformFeedbackVarying(int, int, int, int, int, int, int, int, int, byte, int[][][][]);
	@Import static void glGetTransformFeedbackVarying(int, int, int, import1.IntBuffer, import1.IntBuffer, import1.IntBuffer, byte);
	@Import static void glGetTransformFeedbackVarying(int, int, int, import1.IntBuffer, import1.IntBuffer, import1.IntBuffer, import3.ByteBuffer);
	@Import static string glGetTransformFeedbackVarying(int, int, int, int, int, int[][]);
	@Import static string glGetTransformFeedbackVarying(int, int, import1.IntBuffer, import1.IntBuffer);
	@Import static void glVertexAttribIPointer(int, int, int, int, import0.Buffer);
	@Import static void glVertexAttribIPointer(int, int, int, int, int);
	@Import static void glGetVertexAttribIiv(int, int, int, int[]);
	@Import static void glGetVertexAttribIiv(int, int, import1.IntBuffer);
	@Import static void glGetVertexAttribIuiv(int, int, int, int[]);
	@Import static void glGetVertexAttribIuiv(int, int, import1.IntBuffer);
	@Import static void glVertexAttribI4i(int, int, int, int, int);
	@Import static void glVertexAttribI4ui(int, int, int, int, int);
	@Import static void glVertexAttribI4iv(int, int, int[]);
	@Import static void glVertexAttribI4iv(int, import1.IntBuffer);
	@Import static void glVertexAttribI4uiv(int, int, int[]);
	@Import static void glVertexAttribI4uiv(int, import1.IntBuffer);
	@Import static void glGetUniformuiv(int, int, int, int[]);
	@Import static void glGetUniformuiv(int, int, import1.IntBuffer);
	@Import static int glGetFragDataLocation(int, string);
	@Import static void glUniform1ui(int, int);
	@Import static void glUniform2ui(int, int, int);
	@Import static void glUniform3ui(int, int, int, int);
	@Import static void glUniform4ui(int, int, int, int, int);
	@Import static void glUniform1uiv(int, int, int, int[]);
	@Import static void glUniform1uiv(int, int, import1.IntBuffer);
	@Import static void glUniform2uiv(int, int, int, int[]);
	@Import static void glUniform2uiv(int, int, import1.IntBuffer);
	@Import static void glUniform3uiv(int, int, int, int[]);
	@Import static void glUniform3uiv(int, int, import1.IntBuffer);
	@Import static void glUniform4uiv(int, int, int, int[]);
	@Import static void glUniform4uiv(int, int, import1.IntBuffer);
	@Import static void glClearBufferiv(int, int, int, int[]);
	@Import static void glClearBufferiv(int, int, import1.IntBuffer);
	@Import static void glClearBufferuiv(int, int, int, int[]);
	@Import static void glClearBufferuiv(int, int, import1.IntBuffer);
	@Import static void glClearBufferfv(int, int, float, int[]);
	@Import static void glClearBufferfv(int, int, import2.FloatBuffer);
	@Import static void glClearBufferfi(int, int, float, int);
	@Import static string glGetStringi(int, int);
	@Import static void glCopyBufferSubData(int, int, int, int, int);
	@Import static void glGetUniformIndices(int, string, int, int[][]);
	@Import static void glGetUniformIndices(int, string, import1.IntBuffer[]);
	@Import static void glGetActiveUniformsiv(int, int, int, int, int, int, int[][]);
	@Import static void glGetActiveUniformsiv(int, int, import1.IntBuffer, int, import1.IntBuffer);
	@Import static int glGetUniformBlockIndex(int, string);
	@Import static void glGetActiveUniformBlockiv(int, int, int, int, int[]);
	@Import static void glGetActiveUniformBlockiv(int, int, int, import1.IntBuffer);
	@Import static void glGetActiveUniformBlockName(int, int, int, int, int, byte, int[][]);
	@Import static void glGetActiveUniformBlockName(int, int, import0.Buffer, import0.Buffer);
	@Import static string glGetActiveUniformBlockName(int, int);
	@Import static void glUniformBlockBinding(int, int, int);
	@Import static void glDrawArraysInstanced(int, int, int, int);
	@Import static void glDrawElementsInstanced(int, int, int, import0.Buffer, int);
	@Import static void glDrawElementsInstanced(int, int, int, int, int);
	@Import static long glFenceSync(int, int);
	@Import static bool glIsSync(long);
	@Import static void glDeleteSync(long);
	@Import static int glClientWaitSync(long, int, long);
	@Import static void glWaitSync(long, int, long);
	@Import static void glGetInteger64v(int, long, int[]);
	@Import static void glGetInteger64v(int, import4.LongBuffer);
	@Import static void glGetSynciv(long, int, int, int, int, int, int[][]);
	@Import static void glGetSynciv(long, int, int, import1.IntBuffer, import1.IntBuffer);
	@Import static void glGetInteger64i_v(int, int, long, int[]);
	@Import static void glGetInteger64i_v(int, int, import4.LongBuffer);
	@Import static void glGetBufferParameteri64v(int, int, long, int[]);
	@Import static void glGetBufferParameteri64v(int, int, import4.LongBuffer);
	@Import static void glGenSamplers(int, int, int[]);
	@Import static void glGenSamplers(int, import1.IntBuffer);
	@Import static void glDeleteSamplers(int, int, int[]);
	@Import static void glDeleteSamplers(int, import1.IntBuffer);
	@Import static bool glIsSampler(int);
	@Import static void glBindSampler(int, int);
	@Import static void glSamplerParameteri(int, int, int);
	@Import static void glSamplerParameteriv(int, int, int, int[]);
	@Import static void glSamplerParameteriv(int, int, import1.IntBuffer);
	@Import static void glSamplerParameterf(int, int, float);
	@Import static void glSamplerParameterfv(int, int, float, int[]);
	@Import static void glSamplerParameterfv(int, int, import2.FloatBuffer);
	@Import static void glGetSamplerParameteriv(int, int, int, int[]);
	@Import static void glGetSamplerParameteriv(int, int, import1.IntBuffer);
	@Import static void glGetSamplerParameterfv(int, int, float, int[]);
	@Import static void glGetSamplerParameterfv(int, int, import2.FloatBuffer);
	@Import static void glVertexAttribDivisor(int, int);
	@Import static void glBindTransformFeedback(int, int);
	@Import static void glDeleteTransformFeedbacks(int, int, int[]);
	@Import static void glDeleteTransformFeedbacks(int, import1.IntBuffer);
	@Import static void glGenTransformFeedbacks(int, int, int[]);
	@Import static void glGenTransformFeedbacks(int, import1.IntBuffer);
	@Import static bool glIsTransformFeedback(int);
	@Import static void glPauseTransformFeedback();
	@Import static void glResumeTransformFeedback();
	@Import static void glGetProgramBinary(int, int, int, int, int, int, import0.Buffer[][]);
	@Import static void glGetProgramBinary(int, int, import1.IntBuffer, import1.IntBuffer, import0.Buffer);
	@Import static void glProgramBinary(int, int, import0.Buffer, int);
	@Import static void glProgramParameteri(int, int, int);
	@Import static void glInvalidateFramebuffer(int, int, int, int[]);
	@Import static void glInvalidateFramebuffer(int, int, import1.IntBuffer);
	@Import static void glInvalidateSubFramebuffer(int, int, int, int, int, int, int, int[]);
	@Import static void glInvalidateSubFramebuffer(int, int, import1.IntBuffer, int, int, int, int);
	@Import static void glTexStorage2D(int, int, int, int, int);
	@Import static void glTexStorage3D(int, int, int, int, int, int);
	@Import static void glGetInternalformativ(int, int, int, int, int, int[]);
	@Import static void glGetInternalformativ(int, int, int, int, import1.IntBuffer);
	@Import static void glReadPixels(int, int, int, int, int, int, int);
	mixin IJavaObjectImplementation!(false);
	public static immutable string _javaParameterString = "Landroid/opengl/GLES30";
}
