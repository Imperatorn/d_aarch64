module android.java.android.opengl.GLES11_d_interface;
import arsd.jni : IJavaObjectImplementation, JavaPackageId, JavaName, IJavaObject, ImportExportImpl, JavaInterfaceMembers;
static import arsd.jni;

import import0 = android.java.java.nio.Buffer_d_interface;
import import3 = android.java.java.lang.Class_d_interface;
import import2 = android.java.java.nio.IntBuffer_d_interface;
import import1 = android.java.java.nio.FloatBuffer_d_interface;

final class GLES11 : IJavaObject {
	static immutable string[] _d_canCastTo = [
	];
	@Import this(arsd.jni.Default);
	@Import static void glBindBuffer(int, int);
	@Import static void glBufferData(int, int, import0.Buffer, int);
	@Import static void glBufferSubData(int, int, int, import0.Buffer);
	@Import static void glClipPlanef(int, float, int[]);
	@Import static void glClipPlanef(int, import1.FloatBuffer);
	@Import static void glClipPlanex(int, int, int[]);
	@Import static void glClipPlanex(int, import2.IntBuffer);
	@Import static void glColor4ub(byte, byte, byte, byte);
	@Import static void glColorPointer(int, int, int, int);
	@Import static void glDeleteBuffers(int, int, int[]);
	@Import static void glDeleteBuffers(int, import2.IntBuffer);
	@Import static void glDrawElements(int, int, int, int);
	@Import static void glGenBuffers(int, int, int[]);
	@Import static void glGenBuffers(int, import2.IntBuffer);
	@Import static void glGetBooleanv(int, bool, int[]);
	@Import static void glGetBooleanv(int, import2.IntBuffer);
	@Import static void glGetBufferParameteriv(int, int, int, int[]);
	@Import static void glGetBufferParameteriv(int, int, import2.IntBuffer);
	@Import static void glGetClipPlanef(int, float, int[]);
	@Import static void glGetClipPlanef(int, import1.FloatBuffer);
	@Import static void glGetClipPlanex(int, int, int[]);
	@Import static void glGetClipPlanex(int, import2.IntBuffer);
	@Import static void glGetFixedv(int, int, int[]);
	@Import static void glGetFixedv(int, import2.IntBuffer);
	@Import static void glGetFloatv(int, float, int[]);
	@Import static void glGetFloatv(int, import1.FloatBuffer);
	@Import static void glGetLightfv(int, int, float, int[]);
	@Import static void glGetLightfv(int, int, import1.FloatBuffer);
	@Import static void glGetLightxv(int, int, int, int[]);
	@Import static void glGetLightxv(int, int, import2.IntBuffer);
	@Import static void glGetMaterialfv(int, int, float, int[]);
	@Import static void glGetMaterialfv(int, int, import1.FloatBuffer);
	@Import static void glGetMaterialxv(int, int, int, int[]);
	@Import static void glGetMaterialxv(int, int, import2.IntBuffer);
	@Import static void glGetTexEnvfv(int, int, float, int[]);
	@Import static void glGetTexEnvfv(int, int, import1.FloatBuffer);
	@Import static void glGetTexEnviv(int, int, int, int[]);
	@Import static void glGetTexEnviv(int, int, import2.IntBuffer);
	@Import static void glGetTexEnvxv(int, int, int, int[]);
	@Import static void glGetTexEnvxv(int, int, import2.IntBuffer);
	@Import static void glGetTexParameterfv(int, int, float, int[]);
	@Import static void glGetTexParameterfv(int, int, import1.FloatBuffer);
	@Import static void glGetTexParameteriv(int, int, int, int[]);
	@Import static void glGetTexParameteriv(int, int, import2.IntBuffer);
	@Import static void glGetTexParameterxv(int, int, int, int[]);
	@Import static void glGetTexParameterxv(int, int, import2.IntBuffer);
	@Import static bool glIsBuffer(int);
	@Import static bool glIsEnabled(int);
	@Import static bool glIsTexture(int);
	@Import static void glNormalPointer(int, int, int);
	@Import static void glPointParameterf(int, float);
	@Import static void glPointParameterfv(int, float, int[]);
	@Import static void glPointParameterfv(int, import1.FloatBuffer);
	@Import static void glPointParameterx(int, int);
	@Import static void glPointParameterxv(int, int, int[]);
	@Import static void glPointParameterxv(int, import2.IntBuffer);
	@Import static void glPointSizePointerOES(int, int, import0.Buffer);
	@Import static void glTexCoordPointer(int, int, int, int);
	@Import static void glTexEnvi(int, int, int);
	@Import static void glTexEnviv(int, int, int, int[]);
	@Import static void glTexEnviv(int, int, import2.IntBuffer);
	@Import static void glTexParameterfv(int, int, float, int[]);
	@Import static void glTexParameterfv(int, int, import1.FloatBuffer);
	@Import static void glTexParameteri(int, int, int);
	@Import static void glTexParameteriv(int, int, int, int[]);
	@Import static void glTexParameteriv(int, int, import2.IntBuffer);
	@Import static void glTexParameterxv(int, int, int, int[]);
	@Import static void glTexParameterxv(int, int, import2.IntBuffer);
	@Import static void glVertexPointer(int, int, int, int);
	@Import static void glActiveTexture(int);
	@Import static void glAlphaFunc(int, float);
	@Import static void glAlphaFuncx(int, int);
	@Import static void glBindTexture(int, int);
	@Import static void glBlendFunc(int, int);
	@Import static void glClear(int);
	@Import static void glClearColor(float, float, float, float);
	@Import static void glClearColorx(int, int, int, int);
	@Import static void glClearDepthf(float);
	@Import static void glClearDepthx(int);
	@Import static void glClearStencil(int);
	@Import static void glClientActiveTexture(int);
	@Import static void glColor4f(float, float, float, float);
	@Import static void glColor4x(int, int, int, int);
	@Import static void glColorMask(bool, bool, bool, bool);
	@Import static void glColorPointer(int, int, int, import0.Buffer);
	@Import static void glCompressedTexImage2D(int, int, int, int, int, int, int, import0.Buffer);
	@Import static void glCompressedTexSubImage2D(int, int, int, int, int, int, int, int, import0.Buffer);
	@Import static void glCopyTexImage2D(int, int, int, int, int, int, int, int);
	@Import static void glCopyTexSubImage2D(int, int, int, int, int, int, int, int);
	@Import static void glCullFace(int);
	@Import static void glDeleteTextures(int, int, int[]);
	@Import static void glDeleteTextures(int, import2.IntBuffer);
	@Import static void glDepthFunc(int);
	@Import static void glDepthMask(bool);
	@Import static void glDepthRangef(float, float);
	@Import static void glDepthRangex(int, int);
	@Import static void glDisable(int);
	@Import static void glDisableClientState(int);
	@Import static void glDrawArrays(int, int, int);
	@Import static void glDrawElements(int, int, int, import0.Buffer);
	@Import static void glEnable(int);
	@Import static void glEnableClientState(int);
	@Import static void glFinish();
	@Import static void glFlush();
	@Import static void glFogf(int, float);
	@Import static void glFogfv(int, float, int[]);
	@Import static void glFogfv(int, import1.FloatBuffer);
	@Import static void glFogx(int, int);
	@Import static void glFogxv(int, int, int[]);
	@Import static void glFogxv(int, import2.IntBuffer);
	@Import static void glFrontFace(int);
	@Import static void glFrustumf(float, float, float, float, float, float);
	@Import static void glFrustumx(int, int, int, int, int, int);
	@Import static void glGenTextures(int, int, int[]);
	@Import static void glGenTextures(int, import2.IntBuffer);
	@Import static int glGetError();
	@Import static void glGetIntegerv(int, int, int[]);
	@Import static void glGetIntegerv(int, import2.IntBuffer);
	@Import static string glGetString(int);
	@Import static void glHint(int, int);
	@Import static void glLightModelf(int, float);
	@Import static void glLightModelfv(int, float, int[]);
	@Import static void glLightModelfv(int, import1.FloatBuffer);
	@Import static void glLightModelx(int, int);
	@Import static void glLightModelxv(int, int, int[]);
	@Import static void glLightModelxv(int, import2.IntBuffer);
	@Import static void glLightf(int, int, float);
	@Import static void glLightfv(int, int, float, int[]);
	@Import static void glLightfv(int, int, import1.FloatBuffer);
	@Import static void glLightx(int, int, int);
	@Import static void glLightxv(int, int, int, int[]);
	@Import static void glLightxv(int, int, import2.IntBuffer);
	@Import static void glLineWidth(float);
	@Import static void glLineWidthx(int);
	@Import static void glLoadIdentity();
	@Import static void glLoadMatrixf(float, int[]);
	@Import static void glLoadMatrixf(import1.FloatBuffer);
	@Import static void glLoadMatrixx(int, int[]);
	@Import static void glLoadMatrixx(import2.IntBuffer);
	@Import static void glLogicOp(int);
	@Import static void glMaterialf(int, int, float);
	@Import static void glMaterialfv(int, int, float, int[]);
	@Import static void glMaterialfv(int, int, import1.FloatBuffer);
	@Import static void glMaterialx(int, int, int);
	@Import static void glMaterialxv(int, int, int, int[]);
	@Import static void glMaterialxv(int, int, import2.IntBuffer);
	@Import static void glMatrixMode(int);
	@Import static void glMultMatrixf(float, int[]);
	@Import static void glMultMatrixf(import1.FloatBuffer);
	@Import static void glMultMatrixx(int, int[]);
	@Import static void glMultMatrixx(import2.IntBuffer);
	@Import static void glMultiTexCoord4f(int, float, float, float, float);
	@Import static void glMultiTexCoord4x(int, int, int, int, int);
	@Import static void glNormal3f(float, float, float);
	@Import static void glNormal3x(int, int, int);
	@Import static void glNormalPointer(int, int, import0.Buffer);
	@Import static void glOrthof(float, float, float, float, float, float);
	@Import static void glOrthox(int, int, int, int, int, int);
	@Import static void glPixelStorei(int, int);
	@Import static void glPointSize(float);
	@Import static void glPointSizex(int);
	@Import static void glPolygonOffset(float, float);
	@Import static void glPolygonOffsetx(int, int);
	@Import static void glPopMatrix();
	@Import static void glPushMatrix();
	@Import static void glReadPixels(int, int, int, int, int, int, import0.Buffer);
	@Import static void glRotatef(float, float, float, float);
	@Import static void glRotatex(int, int, int, int);
	@Import static void glSampleCoverage(float, bool);
	@Import static void glSampleCoveragex(int, bool);
	@Import static void glScalef(float, float, float);
	@Import static void glScalex(int, int, int);
	@Import static void glScissor(int, int, int, int);
	@Import static void glShadeModel(int);
	@Import static void glStencilFunc(int, int, int);
	@Import static void glStencilMask(int);
	@Import static void glStencilOp(int, int, int);
	@Import static void glTexCoordPointer(int, int, int, import0.Buffer);
	@Import static void glTexEnvf(int, int, float);
	@Import static void glTexEnvfv(int, int, float, int[]);
	@Import static void glTexEnvfv(int, int, import1.FloatBuffer);
	@Import static void glTexEnvx(int, int, int);
	@Import static void glTexEnvxv(int, int, int, int[]);
	@Import static void glTexEnvxv(int, int, import2.IntBuffer);
	@Import static void glTexImage2D(int, int, int, int, int, int, int, int, import0.Buffer);
	@Import static void glTexParameterf(int, int, float);
	@Import static void glTexParameterx(int, int, int);
	@Import static void glTexSubImage2D(int, int, int, int, int, int, int, int, import0.Buffer);
	@Import static void glTranslatef(float, float, float);
	@Import static void glTranslatex(int, int, int);
	@Import static void glVertexPointer(int, int, int, import0.Buffer);
	@Import static void glViewport(int, int, int, int);
	@Import import3.Class getClass();
	@Import int hashCode();
	@Import bool equals(IJavaObject);
	@Import @JavaName("toString") string toString_();
	override string toString() { return arsd.jni.javaObjectToString(this); }
	@Import void notify();
	@Import void notifyAll();
	@Import void wait(long);
	@Import void wait(long, int);
	@Import void wait();
	mixin IJavaObjectImplementation!(false);
	public static immutable string _javaParameterString = "Landroid/opengl/GLES11;";
}



