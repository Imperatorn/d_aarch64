module android.java.android.content.ContentResolver_d_interface;
import arsd.jni : IJavaObjectImplementation, JavaPackageId, JavaName, IJavaObject, ImportExportImpl;

import import8 = android.java.android.content.res.AssetFileDescriptor_d_interface;
import import17 = android.java.android.content.SyncAdapterType_d_interface;
import import13 = android.java.android.database.ContentObserver_d_interface;
import import2 = android.java.android.database.Cursor_d_interface;
import import1 = android.java.android.net.Uri_d_interface;
import import15 = android.java.android.accounts.Account_d_interface;
import import16 = android.java.android.content.SyncRequest_d_interface;
import import6 = android.java.java.io.OutputStream_d_interface;
import import5 = android.java.java.io.InputStream_d_interface;
import import9 = android.java.android.content.ContentValues_d_interface;
import import3 = android.java.android.os.CancellationSignal_d_interface;
import import12 = android.java.android.content.ContentProviderClient_d_interface;
import import4 = android.java.android.os.Bundle_d_interface;
import import7 = android.java.android.os.ParcelFileDescriptor_d_interface;
import import10 = android.java.android.content.ContentProviderResult_d_interface;
import import11 = android.java.java.util.ArrayList_d_interface;
import import18 = android.java.android.content.SyncInfo_d_interface;
import import14 = android.java.java.util.List_d_interface;
import import19 = android.java.android.content.SyncStatusObserver_d_interface;
import import0 = android.java.android.content.Context_d_interface;

final class ContentResolver : IJavaObject {
	@Import this(import0.Context);
	@Import string getType(import1.Uri);
	@Import string[] getStreamTypes(import1.Uri, string);
	@Import import2.Cursor query(import1.Uri, string, string, string, string[][]);
	@Import import2.Cursor query(import1.Uri, string, string, string, string, import3.CancellationSignal[][]);
	@Import import2.Cursor query(import1.Uri, string, import4.Bundle, import3.CancellationSignal[]);
	@Import import1.Uri canonicalize(import1.Uri);
	@Import import1.Uri uncanonicalize(import1.Uri);
	@Import bool refresh(import1.Uri, import4.Bundle, import3.CancellationSignal);
	@Import import5.InputStream openInputStream(import1.Uri);
	@Import import6.OutputStream openOutputStream(import1.Uri);
	@Import import6.OutputStream openOutputStream(import1.Uri, string);
	@Import import7.ParcelFileDescriptor openFileDescriptor(import1.Uri, string);
	@Import import7.ParcelFileDescriptor openFileDescriptor(import1.Uri, string, import3.CancellationSignal);
	@Import import8.AssetFileDescriptor openAssetFileDescriptor(import1.Uri, string);
	@Import import8.AssetFileDescriptor openAssetFileDescriptor(import1.Uri, string, import3.CancellationSignal);
	@Import import8.AssetFileDescriptor openTypedAssetFileDescriptor(import1.Uri, string, import4.Bundle);
	@Import import8.AssetFileDescriptor openTypedAssetFileDescriptor(import1.Uri, string, import4.Bundle, import3.CancellationSignal);
	@Import import1.Uri insert(import1.Uri, import9.ContentValues);
	@Import import10.ContentProviderResult[] applyBatch(string, import11.ArrayList);
	@Import int bulkInsert(import1.Uri, import9.ContentValues[]);
	@Import @JavaName("delete") int delete_(import1.Uri, string, string[]);
	@Import int update(import1.Uri, import9.ContentValues, string, string[]);
	@Import import4.Bundle call(import1.Uri, string, string, import4.Bundle);
	@Import import12.ContentProviderClient acquireContentProviderClient(import1.Uri);
	@Import import12.ContentProviderClient acquireContentProviderClient(string);
	@Import import12.ContentProviderClient acquireUnstableContentProviderClient(import1.Uri);
	@Import import12.ContentProviderClient acquireUnstableContentProviderClient(string);
	@Import void registerContentObserver(import1.Uri, bool, import13.ContentObserver);
	@Import void unregisterContentObserver(import13.ContentObserver);
	@Import void notifyChange(import1.Uri, import13.ContentObserver);
	@Import void notifyChange(import1.Uri, import13.ContentObserver, bool);
	@Import void notifyChange(import1.Uri, import13.ContentObserver, int);
	@Import void takePersistableUriPermission(import1.Uri, int);
	@Import void releasePersistableUriPermission(import1.Uri, int);
	@Import import14.List getPersistedUriPermissions();
	@Import import14.List getOutgoingPersistedUriPermissions();
	@Import void startSync(import1.Uri, import4.Bundle);
	@Import static void requestSync(import15.Account, string, import4.Bundle);
	@Import static void requestSync(import16.SyncRequest);
	@Import static void validateSyncExtrasBundle(import4.Bundle);
	@Import void cancelSync(import1.Uri);
	@Import static void cancelSync(import15.Account, string);
	@Import static import17.SyncAdapterType[] getSyncAdapterTypes();
	@Import static bool getSyncAutomatically(import15.Account, string);
	@Import static void setSyncAutomatically(import15.Account, string, bool);
	@Import static void addPeriodicSync(import15.Account, string, import4.Bundle, long);
	@Import static void removePeriodicSync(import15.Account, string, import4.Bundle);
	@Import static void cancelSync(import16.SyncRequest);
	@Import static import14.List getPeriodicSyncs(import15.Account, string);
	@Import static int getIsSyncable(import15.Account, string);
	@Import static void setIsSyncable(import15.Account, string, int);
	@Import static bool getMasterSyncAutomatically();
	@Import static void setMasterSyncAutomatically(bool);
	@Import static bool isSyncActive(import15.Account, string);
	@Import static import18.SyncInfo getCurrentSync();
	@Import static import14.List getCurrentSyncs();
	@Import static bool isSyncPending(import15.Account, string);
	@Import static IJavaObject addStatusChangeListener(int, import19.SyncStatusObserver);
	@Import static void removeStatusChangeListener(IJavaObject);
	mixin IJavaObjectImplementation!(false);
	mixin JavaPackageId!("android.content", "ContentResolver");
}
