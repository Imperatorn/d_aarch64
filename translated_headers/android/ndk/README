
HOW THIS WAS MADE
======================

The files in here are generated by dstep, the modified by hand to compile.
Since the Android SDKs are stable now, you shouldn't have to do a full
regeneration again, but if you do, here's how I did it:

Note that not everything worked from the NDK! If you need a file that is
missing, it will have to be hand translated and committed.

So what I did to get started:

	export NDK=/home/me/Android/ndk/android-ndk-r20/
	for i in $NDK/sysroot/usr/include/android/*.h; do
	   dstep -std=c99 --package android.ndk -I"$NDK/sysroot/usr/include/" $i -o`basename $i .h`.d
	done

	rm ndk-version.d # this is useless

Then add
	import arsd.jni; // when building by hand, be sure to get this file from my other library
	import android.ndk; // just import the whole package, easier than hand-fixing the requirements
	nothrow:
	@nogc:

to each file where the `extern (C):` appears. I did it with this linux script:

	for i in *.d; do
		sed -i 's/extern (C):/import arsd.jni;\nimport android.ndk;\n\nextern (C):\nnothrow:\n@nogc:/' $i
	done

And then make a package.d file that public imports all the other modules here.

	echo 'module android.ndk;' > package.d
	grep -h module *.d | sed -e 's/module/public import/' >> package.d


Finally, hand-edit the docs and other things as necessary to get it to build.
Among the changes:

	1) change ULL to UL
	2) Add a definition for off64_t. I put it in package.d for
	convenience.
	3) sensor.d had a `struct AHardwareBuffer` forward declaration that I
	had to delete to avoid " Error: android.ndk.hardware_buffer.AHardwareBuffer at hardware_buffer.d(336) conflicts with android.ndk.sensor.AHardwareBuffer at ensor.d(61)".
	4) I changed a `nanf("")` to `float.nan`.
	5) I added `struct sync_file_info_ {}` and `struct sync_fence_info {}`
	to sync because of undefined reference to them. 

Make sure it compiles:

	dmd *.d ~/arsd/jni.d
